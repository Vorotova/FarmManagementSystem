using System;
using System.Collections.Generic;
using System.Drawing;
using System.Linq;
using System.Windows.Forms;
using FarmManagementSystem.Models;
using FarmManagementSystem.Services;

namespace FarmManagementSystem
{
    public class ClientContractsForm : Form
    {
        private Client client;
        private DatabaseService dbService;
        private List<Sale> clientSales;
        
        private Panel headerPanel;
        private Label lblTitle;
        private Label lblClientInfo;
        private DataGridView dgvContracts;
        private Panel buttonPanel;
        private Button btnAddContract;
        private Button btnEditContract;
        private Button btnDeleteContract;

        public ClientContractsForm(Client client, DatabaseService dbService)
        {
            this.client = client;
            this.dbService = dbService;
            this.clientSales = dbService.GetSalesByClientId(client.Id);
            
            InitializeComponent();
            LoadContracts();
        }

        private void InitializeComponent()
        {
            this.Text = $"–ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ –∫–ª—ñ—î–Ω—Ç–∞: {client.CompanyName}";
            this.Size = new Size(1000, 600);
            this.StartPosition = FormStartPosition.CenterParent;
            FormStyleHelper.ApplyFormStyle(this);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∑–∞–≥–æ–ª–æ–≤–æ–∫
            headerPanel = new Panel
            {
                Dock = DockStyle.Top,
                Height = 100,
                BackColor = FormStyleHelper.PrimaryColor,
                Padding = new Padding(20, 15, 20, 15)
            };

            lblTitle = new Label
            {
                Text = "üìÑ –ö–æ–Ω—Ç—Ä–∞–∫—Ç–∏ —Ç–∞ –ø—Ä–æ–¥–∞–∂—ñ",
                Font = FormStyleHelper.HeaderFont,
                ForeColor = Color.White,
                AutoSize = true,
                Location = new Point(20, 15)
            };

            lblClientInfo = new Label
            {
                Text = $"–ö–ª—ñ—î–Ω—Ç: {client.CompanyName} ({client.ContactPerson})\n" +
                       $"–¢–µ–ª–µ—Ñ–æ–Ω: {client.Phone} | Email: {client.Email ?? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}",
                Font = new Font("Arial", 10F, FontStyle.Regular),
                ForeColor = Color.White,
                AutoSize = true,
                Location = new Point(20, 50)
            };

            headerPanel.Controls.Add(lblTitle);
            headerPanel.Controls.Add(lblClientInfo);

            // –°—Ç–≤–æ—Ä—é—î–º–æ –ø–∞–Ω–µ–ª—å –¥–ª—è –∫–Ω–æ–ø–æ–∫
            buttonPanel = new Panel
            {
                Dock = DockStyle.Bottom,
                Height = 70,
                BackColor = Color.FromArgb(248, 249, 250),
                Padding = new Padding(20, 15, 20, 15)
            };

            // –°—Ç–≤–æ—Ä—é—î–º–æ –∫–Ω–æ–ø–∫–∏
            btnAddContract = FormStyleHelper.CreateStyledButton("‚ûï –î–æ–¥–∞—Ç–∏ –∫–æ–Ω—Ç—Ä–∞–∫—Ç", FormStyleHelper.SuccessColor, new Size(140, 40));
            btnAddContract.Location = new Point(20, 15);
            btnAddContract.Click += BtnAddContract_Click;

            btnEditContract = FormStyleHelper.CreateStyledButton("‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", FormStyleHelper.AccentColor, new Size(120, 40));
            btnEditContract.Location = new Point(170, 15);
            btnEditContract.Click += BtnEditContract_Click;

            btnDeleteContract = FormStyleHelper.CreateStyledButton("üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", FormStyleHelper.DangerColor, new Size(120, 40));
            btnDeleteContract.Location = new Point(300, 15);
            btnDeleteContract.Click += BtnDeleteContract_Click;

            buttonPanel.Controls.Add(btnAddContract);
            buttonPanel.Controls.Add(btnEditContract);
            buttonPanel.Controls.Add(btnDeleteContract);

            // –°—Ç–≤–æ—Ä—é—î–º–æ DataGridView –¥–ª—è –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤
            dgvContracts = FormStyleHelper.CreateStyledDataGridView();
            dgvContracts.Location = new Point(20, 120); // –ü—ñ–¥ –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            dgvContracts.Size = new Size(960, 410); // –†–æ–∑–º—ñ—Ä –∑ —É—Ä–∞—Ö—É–≤–∞–Ω–Ω—è–º –ø–∞–Ω–µ–ª—ñ –∫–Ω–æ–ø–æ–∫
            dgvContracts.Anchor = AnchorStyles.Top | AnchorStyles.Left | AnchorStyles.Right | AnchorStyles.Bottom;
            dgvContracts.AllowUserToAddRows = false;
            dgvContracts.AllowUserToDeleteRows = false;
            dgvContracts.ReadOnly = true;
            dgvContracts.SelectionMode = DataGridViewSelectionMode.FullRowSelect;
            dgvContracts.MultiSelect = false;
            dgvContracts.AutoSizeColumnsMode = DataGridViewAutoSizeColumnsMode.None;
            dgvContracts.RowHeadersVisible = false;

            // –î–æ–¥–∞—î–º–æ –∫–æ–ª–æ–Ω–∫–∏
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "ID", DataPropertyName = "Id", Width = 50 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–¢–∏–ø", Width = 80 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–ü—Ä–æ–¥—É–∫—Ç", Width = 120 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–ö—ñ–ª—å–∫—ñ—Å—Ç—å (–∫–≥)", DataPropertyName = "Quantity", Width = 100 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–¶—ñ–Ω–∞ –∑–∞ –∫–≥", DataPropertyName = "UnitPrice", Width = 100 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞", Width = 120 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–î–∞—Ç–∞ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—É", Width = 120 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–î–∞—Ç–∞ –ø–æ—Å—Ç–∞—á–∞–Ω–Ω—è", Width = 120 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–°—Ç–∞—Ç—É—Å", DataPropertyName = "Status", Width = 100 });
            dgvContracts.Columns.Add(new DataGridViewTextBoxColumn { HeaderText = "–î–∞—Ç–∞ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è", Width = 120 });

            // –î–æ–¥–∞—î–º–æ –∫–æ–Ω—Ç—Ä–æ–ª–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É
            this.Controls.Add(headerPanel);    // –ó–≤–µ—Ä—Ö—É
            this.Controls.Add(buttonPanel);    // –ó–Ω–∏–∑—É
            this.Controls.Add(dgvContracts);   // –ó–∞–ø–æ–≤–Ω—é—î —Å–µ—Ä–µ–¥–∏–Ω—É
        }

        private void LoadContracts()
        {
            // –û—á–∏—â—É—î–º–æ —Ç–∞–±–ª–∏—Ü—é
            dgvContracts.DataSource = null;
            dgvContracts.Rows.Clear();
            
            // –û–Ω–æ–≤–ª—é—î–º–æ –¥–∞–Ω—ñ –∑ –±–∞–∑–∏
            clientSales = dbService.GetSalesByClientId(client.Id);
            
            // –î–æ–¥–∞—î–º–æ –¥–∞–Ω—ñ –¥–æ —Ç–∞–±–ª–∏—Ü—ñ
            foreach (var sale in clientSales)
            {
                try
                {
                    string saleType = sale.GetSaleType();
                    string productType = sale.GetProductType();
                    
                    var row = new object[]
                    {
                        sale.Id,
                        saleType,
                        productType,
                        sale.Quantity,
                        sale.UnitPrice,
                        sale.CalculateTotalAmount(),
                        sale.ContractDate?.ToString("dd.MM.yyyy") ?? "",
                        sale.DeliveryDate?.ToString("dd.MM.yyyy") ?? "",
                        sale.Status,
                        sale.CreatedDate.ToString("dd.MM.yyyy")
                    };
                    dgvContracts.Rows.Add(row);
                }
                catch (Exception ex)
                {
                    MessageBox.Show($"–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ä—è–¥–∫–∞: {ex.Message}", "–ü–æ–º–∏–ª–∫–∞");
                }
            }

            // –û–Ω–æ–≤–ª—é—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ –∫–ª—ñ—î–Ω—Ç–∞ –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É
            int totalContracts = clientSales.Count;
            int totalAmount = clientSales.Sum(s => s.CalculateTotalAmount());
            
            lblClientInfo.Text = $"–ö–ª—ñ—î–Ω—Ç: {client.CompanyName} ({client.ContactPerson})\n" +
                                $"–¢–µ–ª–µ—Ñ–æ–Ω: {client.Phone} | Email: {client.Email ?? "–ù–µ –≤–∫–∞–∑–∞–Ω–æ"}\n" +
                                $"–í—Å—å–æ–≥–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç—ñ–≤: {totalContracts} | –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: {totalAmount} –≥—Ä–Ω";
                                
            // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ —Ç–∞–±–ª–∏—Ü—è –≤–∏–¥–∏–º–∞ —Ç–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞
            dgvContracts.Visible = true;
            dgvContracts.AutoResizeColumns();
            dgvContracts.Refresh();
            dgvContracts.Invalidate();
        }

        private void BtnAddContract_Click(object sender, EventArgs e)
        {
            var saleForm = new SaleEditForm();
            
            // –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞ —Ç–∞ —Ä–æ–±–∏–º–æ –ø–æ–ª–µ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∏–º
            saleForm.SetClientAndDisable(client);
            
            if (saleForm.ShowDialog() == DialogResult.OK)
            {
                // –ü–µ—Ä–µ–∫–æ–Ω—É—î–º–æ—Å—è, —â–æ –∫–æ–Ω—Ç—Ä–∞–∫—Ç —Å—Ç–≤–æ—Ä—é—î—Ç—å—Å—è –¥–ª—è –ø–æ—Ç–æ—á–Ω–æ–≥–æ –∫–ª—ñ—î–Ω—Ç–∞
                saleForm.Sale.ClientId = client.Id;
                dbService.AddSale(saleForm.Sale);
                LoadContracts(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            }
        }

        private void BtnEditContract_Click(object sender, EventArgs e)
        {
            if (dgvContracts.SelectedRows.Count == 0)
            {
                MessageBox.Show("–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è!", "–£–≤–∞–≥–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var selectedIndex = dgvContracts.SelectedRows[0].Index;
            var selectedSale = clientSales[selectedIndex];
            
            var saleForm = new SaleEditForm(selectedSale);
            if (saleForm.ShowDialog() == DialogResult.OK)
            {
                dbService.UpdateSale(saleForm.Sale);
                LoadContracts(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            }
        }

        private void BtnDeleteContract_Click(object sender, EventArgs e)
        {
            if (dgvContracts.SelectedRows.Count == 0)
            {
                MessageBox.Show("–û–±–µ—Ä—ñ—Ç—å –∫–æ–Ω—Ç—Ä–∞–∫—Ç –¥–ª—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è!", "–£–≤–∞–≥–∞", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                return;
            }

            var selectedIndex = dgvContracts.SelectedRows[0].Index;
            var selectedSale = clientSales[selectedIndex];
            
            var result = MessageBox.Show(
                $"–í–∏ –¥—ñ–π—Å–Ω–æ –±–∞–∂–∞—î—Ç–µ –≤–∏–¥–∞–ª–∏—Ç–∏ {selectedSale.GetSaleType().ToLower()} –Ω–∞ {selectedSale.GetProductType()}?\n" +
                $"–ö—ñ–ª—å–∫—ñ—Å—Ç—å: {selectedSale.Quantity} –∫–≥, –°—É–º–∞: {selectedSale.CalculateTotalAmount()} –≥—Ä–Ω",
                "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                MessageBoxButtons.YesNo, 
                MessageBoxIcon.Question);
                
            if (result == DialogResult.Yes)
            {
                dbService.DeleteSale(selectedSale.Id);
                LoadContracts(); // –û–Ω–æ–≤–ª—é—î–º–æ –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è
            }
        }
    }
} 